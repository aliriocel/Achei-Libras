{"version":3,"sources":["webpack:///src/app/chat/chat.page.html","webpack:///src/app/chat/chat-routing.module.ts","webpack:///src/app/chat/chat.module.ts","webpack:///src/app/chat/chat.page.scss","webpack:///src/app/chat/chat.page.ts","webpack:///src/app/services/chat.service.ts"],"names":["routes","path","component","ChatPageRoutingModule","imports","forChild","exports","ChatPageModule","declarations","ChatPage","chatService","router","newMsg","messages","getChatMessage","addChatMessage","then","content","scrollToBottom","signOut","navigateByUrl","replaceUrl","selector","template","ChatService","afAuth","afs","currentuser","onAuthStateChanged","user","console","log","email","password","createUserWithEmailAndPassword","credential","uid","doc","set","signInWithEmailAndPassword","msg","collection","add","from","createdAt","FieldValue","serverTimestamp","users","getUsers","pipe","res","ref","orderBy","valueChanges","idField","m","fromName","getUsersForMsg","myMsg","msgFromId","usr","providedIn"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACKf,UAAMA,MAAM,GAAW,CACrB;AACEC,YAAI,EAAE,EADR;AAEEC,iBAAS,EAAE;AAFb,OADqB,CAAvB;;UAWaC,qBAAqB;AAAA;AAAA,O;;AAArBA,2BAAqB,6DAJjC,+DAAS;AACRC,eAAO,EAAE,CAAC,6DAAaC,QAAb,CAAsBL,MAAtB,CAAD,CADD;AAERM,eAAO,EAAE,CAAC,4DAAD;AAFD,OAAT,CAIiC,GAArBH,qBAAqB,CAArB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCGAI,cAAc;AAAA;AAAA,O;;AAAdA,oBAAc,6DAT1B,+DAAS;AACRH,eAAO,EAAE,CACP,4DADO,EAEP,0DAFO,EAGP,0DAHO,EAIP,0EAJO,CADD;AAORI,oBAAY,EAAE,CAAC,mDAAD;AAPN,OAAT,CAS0B,GAAdD,cAAc,CAAd;;;;;;;;;;;;;;;;ACnBb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCWFE,QAAQ;AAOnB,0BAAoBC,WAApB,EACUC,MADV,EACwB;AAAA;;AADJ,eAAAD,WAAA,GAAAA,WAAA;AACV,eAAAC,MAAA,GAAAA,MAAA;AAHV,eAAAC,MAAA,GAAS,EAAT;AAIK;;AATc;AAAA;AAAA,qCAWR;AAET,iBAAKC,QAAL,GAAgB,KAAKH,WAAL,CAAiBI,cAAjB,EAAhB;AACD;AAdkB;AAAA;AAAA,wCAgBL;AAAA;;AACZ,iBAAKJ,WAAL,CAAiBK,cAAjB,CAAgC,KAAKH,MAArC,EAA6CI,IAA7C,CAAkD,YAAM;AACtD,mBAAI,CAACJ,MAAL,GAAc,EAAd;;AACA,mBAAI,CAACK,OAAL,CAAaC,cAAb;AACD,aAHD;AAID;AArBkB;AAAA;AAAA,oCAuBZ;AAAA;;AACL,iBAAKR,WAAL,CAAiBS,OAAjB,GAA2BH,IAA3B,CAAgC,YAAI;AAClC,oBAAI,CAACL,MAAL,CAAYS,aAAZ,CAA0B,GAA1B,EAA+B;AAAEC,0BAAU,EAAE;AAAd,eAA/B;AACD,aAFD;AAGD;AA3BkB;;AAAA;AAAA,S;;;;gBAPZ;;gBAHA;;;;;;gBAYN,uD;AAAS,iBAAC,yDAAD;;;AAFCZ,cAAQ,6DALpB,gEAAU;AACTa,gBAAQ,EAAE,UADD;AAETC,gBAAQ,EAAR;AAAA;AAAA,0FAFS;;;;AAAA,OAAV,CAKoB,GAARd,QAAQ,CAAR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCcAe,WAAW;AAGtB,6BAAoBC,MAApB,EACUC,GADV,EACiC;AAAA;;AAAA;;AADb,eAAAD,MAAA,GAAAA,MAAA;AACV,eAAAC,GAAA,GAAAA,GAAA;AAHV,eAAAC,WAAA,GAAoB,IAApB;AAKE,eAAKF,MAAL,CAAYG,kBAAZ,CAA+B,UAAAC,IAAI,EAAI;AACrCC,mBAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,IAAzB;AACA,kBAAI,CAACF,WAAL,GAAmBE,IAAnB;AACD,WAHD;AAID;;AAVqB;AAAA;AAAA,uCAYY;AAAA,gBAAnBG,KAAmB,QAAnBA,KAAmB;AAAA,gBAAZC,QAAY,QAAZA,QAAY;;;;;;;;AACb,6BAAM,KAAKR,MAAL,CAAYS,8BAAZ,CACtBF,KADsB,EACfC,QADe,CAAN;;;AAAbE,gC;AAGNL,6BAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBI,UAAxB;AACMC,yB,GAAMD,UAAU,CAACN,IAAX,CAAgBO,G;uDAErB,KAAKV,GAAL,CAASW,GAAT,iBACID,GADJ,GACWE,GADX,CACe;AAClBF,2BAAG,EAAHA,GADkB;AAElBJ,6BAAK,EAAEG,UAAU,CAACN,IAAX,CAAgBG;AAFL,uBADf,C;;;;;;;;;AAKR;AAxBqB;AAAA;AAAA,wCA2BM;AAAA,gBAAnBA,KAAmB,SAAnBA,KAAmB;AAAA,gBAAZC,QAAY,SAAZA,QAAY;AAC1B,mBAAO,KAAKR,MAAL,CAAYc,0BAAZ,CACJP,KADI,EACGC,QADH,CAAP;AAED;AA9BqB;AAAA;AAAA,oCAgCZ;AACR,mBAAO,KAAKR,MAAL,CAAYN,OAAZ,EAAP;AACD;AAlCqB;AAAA;AAAA,yCAoCPqB,GApCO,EAoCF;AAClB,mBAAO,KAAKd,GAAL,CAASe,UAAT,CAAoB,UAApB,EAAgCC,GAAhC,CAAoC;AACzCF,iBAAG,EAAHA,GADyC;AAEzCG,kBAAI,EAAE,KAAKhB,WAAL,CAAiBS,GAFkB;AAGzCQ,uBAAS,EAAE,uDAAmBC,UAAnB,CAA8BC,eAA9B;AAH8B,aAApC,CAAP;AAKD;AA1CqB;AAAA;AAAA,2CA4CL;AAAA;;AACf,gBAAIC,KAAK,GAAG,EAAZ;AAEA,mBAAO,KAAKC,QAAL,GAAgBC,IAAhB,CACL,iEAAU,UAAAC,GAAG,EAAI;AACfH,mBAAK,GAAGG,GAAR;AACApB,qBAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBgB,KAAzB;AACA,qBAAO,MAAI,CAACrB,GAAL,CAASe,UAAT,CAAoB,UAApB,EAAgC,UAAAU,GAAG;AAAA,uBAAIA,GAAG,CAACC,OAAJ,CAAY,WAAZ,CAAJ;AAAA,eAAnC,EAAiEC,YAAjE,CAA8E;AAAEC,uBAAO,EAAE;AAAX,eAA9E,CAAP;AACD,aAJD,CADK,EAML,2DAAI,UAAAzC,QAAQ,EAAI;AAAA,yDACAA,QADA;AAAA;;AAAA;AACd,oEAAwB;AAAA,sBAAf0C,CAAe;AACtBA,mBAAC,CAACC,QAAF,GAAa,MAAI,CAACC,cAAL,CAAoBF,CAAC,CAACZ,IAAtB,EAA4BI,KAA5B,CAAb;AACAQ,mBAAC,CAACG,KAAF,GAAU,MAAI,CAAC/B,WAAL,CAAiBS,GAAjB,KAAyBmB,CAAC,CAACZ,IAArC;AACD;AAJa;AAAA;AAAA;AAAA;AAAA;;AAKdb,qBAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BlB,QAA9B;AAEA,qBAAOA,QAAP;AACD,aARD,CANK,CAAP;AAgBD;AA/DqB;AAAA;AAAA,qCAiEX;AACT,mBAAO,KAAKa,GAAL,CAASe,UAAT,CAAoB,uBAApB,EAA6CY,YAA7C,CAA0D;AAAEC,qBAAO,EAAE;AAAX,aAA1D,CAAP;AACD;AAnEqB;AAAA;AAAA,yCAqEPK,SArEO,EAqEIZ,KArEJ,EAqEiB;AAAA,wDACrBA,KADqB;AAAA;;AAAA;AACrC,qEAAuB;AAAA,oBAAda,GAAc;;AACrB,oBAAIA,GAAG,CAACxB,GAAJ,IAAWuB,SAAf,EAA0B;AACxB,yBAAOC,GAAG,CAAC5B,KAAX;AACD;AACF;AALoC;AAAA;AAAA;AAAA;AAAA;;AAOrC,mBAAO,MAAP;AACD;AA7EqB;;AAAA;AAAA,S;;;;gBAxBf;;gBACA;;;;AAuBIR,iBAAW,6DAHvB,iEAAW;AACVqC,kBAAU,EAAE;AADF,OAAX,CAGuB,GAAXrC,WAAW,CAAX","file":"chat-chat-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-title>Achei Libras Chat</ion-title>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button></ion-back-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n \\n<ion-content class=\\\"ion-padding\\\">\\n \\n  <ion-grid>\\n    <ion-row *ngFor=\\\"let message of messages | async\\\">\\n      <ion-col size=\\\"9\\\" class=\\\"message\\\"\\n        [offset]=\\\"message.myMsg ? 3 : 0\\\"\\n        [ngClass]=\\\"{ 'my-message': message.myMsg, 'other-message': !message.myMsg }\\\">\\n        <b>{{ message.fromName }}</b><br>\\n        <span>{{ message.msg }}\\n        </span>\\n        <div class=\\\"time ion-text-right\\\"><br>{{ message.createdAt?.toMillis() | date:'short' }}</div>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n \\n</ion-content>\\n \\n<ion-footer>\\n  <ion-toolbar color=\\\"light\\\">\\n    <ion-row class=\\\"ion-align-items-center\\\">\\n      <ion-col size=\\\"10\\\">\\n        <ion-textarea autoGrow=\\\"true\\\" class=\\\"message-input\\\" rows=\\\"1\\\" maxLength=\\\"500\\\" [(ngModel)]=\\\"newMsg\\\" >\\n        </ion-textarea>\\n      </ion-col>\\n      <ion-col size=\\\"2\\\">\\n        <ion-button expand=\\\"block\\\" fill=\\\"clear\\\" color=\\\"primary\\\" [disabled]=\\\"newMsg === ''\\\"\\n          class=\\\"msg-btn\\\" (click)=\\\"sendMessage()\\\">\\n          <ion-icon name=\\\"send\\\" slot=\\\"icon-only\\\"></ion-icon>\\n        </ion-button>\\n      </ion-col>\\n    </ion-row>\\n  </ion-toolbar>\\n</ion-footer>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ChatPage } from './chat.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ChatPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ChatPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ChatPageRoutingModule } from './chat-routing.module';\n\nimport { ChatPage } from './chat.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ChatPageRoutingModule\n  ],\n  declarations: [ChatPage]\n})\nexport class ChatPageModule {}\n","export default \".message-input {\\n  width: 100%;\\n  border: 1px solid var(--ion-color-medium);\\n  border-radius: 6px;\\n  background: #fff;\\n  resize: none;\\n  margin-top: 0px;\\n  --padding-start: 8px;\\n}\\n\\n.message {\\n  padding: 10px !important;\\n  border-radius: 10px !important;\\n  margin-bottom: 4px !important;\\n  white-space: pre-wrap;\\n}\\n\\n.my-message {\\n  background: var(--ion-color-tertiary);\\n  color: #fff;\\n}\\n\\n.other-message {\\n  background: var(--ion-color-secondary);\\n  color: #fff;\\n}\\n\\n.time {\\n  color: #dfdfdf;\\n  float: right;\\n  font-size: small;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY2hhdC9jaGF0LnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFdBQUE7RUFDQSx5Q0FBQTtFQUNBLGtCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxZQUFBO0VBQ0EsZUFBQTtFQUNBLG9CQUFBO0FBQ0o7O0FBRUE7RUFDSSx3QkFBQTtFQUNBLDhCQUFBO0VBQ0EsNkJBQUE7RUFDQSxxQkFBQTtBQUNKOztBQUVBO0VBQ0kscUNBQUE7RUFDQSxXQUFBO0FBQ0o7O0FBRUE7RUFDSSxzQ0FBQTtFQUNBLFdBQUE7QUFDSjs7QUFFQTtFQUNJLGNBQUE7RUFDQSxZQUFBO0VBQ0EsZ0JBQUE7QUFDSiIsImZpbGUiOiJzcmMvYXBwL2NoYXQvY2hhdC5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubWVzc2FnZS1pbnB1dCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0taW9uLWNvbG9yLW1lZGl1bSk7XG4gICAgYm9yZGVyLXJhZGl1czogNnB4O1xuICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gICAgcmVzaXplOiBub25lO1xuICAgIG1hcmdpbi10b3A6IDBweDtcbiAgICAtLXBhZGRpbmctc3RhcnQ6IDhweDtcbn1cbiBcbi5tZXNzYWdlIHtcbiAgICBwYWRkaW5nOiAxMHB4ICFpbXBvcnRhbnQ7XG4gICAgYm9yZGVyLXJhZGl1czogMTBweCAhaW1wb3J0YW50O1xuICAgIG1hcmdpbi1ib3R0b206IDRweCAhaW1wb3J0YW50O1xuICAgIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDtcbn1cbiBcbi5teS1tZXNzYWdlIHtcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1pb24tY29sb3ItdGVydGlhcnkpO1xuICAgIGNvbG9yOiAjZmZmO1xufVxuIFxuLm90aGVyLW1lc3NhZ2Uge1xuICAgIGJhY2tncm91bmQ6IHZhcigtLWlvbi1jb2xvci1zZWNvbmRhcnkpO1xuICAgIGNvbG9yOiAjZmZmO1xufVxuIFxuLnRpbWUge1xuICAgIGNvbG9yOiAjZGZkZmRmO1xuICAgIGZsb2F0OiByaWdodDtcbiAgICBmb250LXNpemU6IHNtYWxsO1xufSJdfQ== */\";","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { IonContent } from '@ionic/angular';\nimport { Observable } from 'rxjs';\nimport { ChatService, Message } from '../services/chat.service';\n\n@Component({\n  selector: 'app-chat',\n  templateUrl: './chat.page.html',\n  styleUrls: ['./chat.page.scss'],\n})\nexport class ChatPage implements OnInit {\n\n  @ViewChild(IonContent) content: IonContent;\n\n  messages: Observable<Message[]>;\n  newMsg = '';\n\n  constructor(private chatService: ChatService,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n\n    this.messages = this.chatService.getChatMessage();\n  }\n\n  sendMessage() {\n    this.chatService.addChatMessage(this.newMsg).then(() => {\n      this.newMsg = '';\n      this.content.scrollToBottom();\n    });\n  }\n\n  singOut(){\n    this.chatService.signOut().then(()=>{\n      this.router.navigateByUrl('/', { replaceUrl: true});\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport * as firebase from 'firebase/app';\nimport { Observable } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\n\nexport interface User {\n  uid: string;\n  email: string;\n}\n\n\nexport interface Message {\n  createdAt: firebase.firestore.FieldValue;\n  id: string;\n  from: string;\n  msg: string;\n  fromName: string;\n  myMsg: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatService {\n  currentuser: User = null;\n\n  constructor(private afAuth: AngularFireAuth,\n    private afs: AngularFirestore) {\n\n    this.afAuth.onAuthStateChanged(user => {\n      console.log('Changed: ', user);\n      this.currentuser = user;\n    });\n  }\n\n  async signUp({ email, password }) {\n    const credential = await this.afAuth.createUserWithEmailAndPassword\n      (email, password);\n\n    console.log('result: ', credential);\n    const uid = credential.user.uid;\n\n    return this.afs.doc(\n      `users/${uid}`).set({\n        uid,\n        email: credential.user.email,\n      })\n  }\n\n\n  signIn({ email, password }) {\n    return this.afAuth.signInWithEmailAndPassword\n      (email, password);\n  }\n\n  signOut() {\n    return this.afAuth.signOut();\n  }\n\n  addChatMessage(msg) {\n    return this.afs.collection('messages').add({\n      msg,\n      from: this.currentuser.uid,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp()\n    });\n  }\n\n  getChatMessage() {\n    let users = [];\n\n    return this.getUsers().pipe(\n      switchMap(res => {\n        users = res;\n        console.log('all users', users);\n        return this.afs.collection('messages', ref => ref.orderBy('createdAt')).valueChanges({ idField: 'id' }) as Observable<Message[]>\n      }),\n      map(messages => {\n        for (let m of messages) {\n          m.fromName = this.getUsersForMsg(m.from, users);\n          m.myMsg = this.currentuser.uid === m.from;\n        }\n        console.log('all messages: ', messages)\n\n        return messages;\n      })\n    )\n  }\n\n  getUsers() {\n    return this.afs.collection('cadastros_de_clientes').valueChanges({ idField: 'uid' }) as Observable<User[]>\n  }\n\n  getUsersForMsg(msgFromId, users: User[]): string {\n    for (let usr of users) {\n      if (usr.uid == msgFromId) {\n        return usr.email;\n      }\n    }\n\n    return 'Você';\n  }\n}\n"]}